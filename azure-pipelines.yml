stages:
- stage: build
  jobs:
    - job: build_rust
      variables:
        build_command: 'cargo build'
        test_command: 'cargo test'
      strategy:
        matrix:
          mac-stable-combadge:
            imageName: 'macos-10.13'
            rustup_toolchain: stable
            working_directory: combadge
            binary_file: target/release/combadge
            artifact_name: combadge_mac
          linux-stable-combadge:
            imageName: 'ubuntu-16.04'
            rustup_toolchain: stable
            working_directory: combadge
            binary_file: target/x86_64-unknown-linux-musl/release/combadge
            artifact_name: combadge_linux
            build_command: 'cross build --target x86_64-unknown-linux-musl'
            test_command: 'cross test --target x86_64-unknown-linux-musl'
          win-stable-combadge:
            imageName: 'vs2017-win2016'
            rustup_toolchain: stable
            working_directory: combadge
            binary_file: target/release/combadge.exe
            artifact_name: combadge_windows
          linux-stable-transporter:
            imageName: 'ubuntu-16.04'
            rustup_toolchain: stable
            working_directory: transporter
            binary_file: target/release/transporter
            artifact_name: transporter

      pool:
        vmImage: $(imageName)

      steps:
        - script: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
            echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
          displayName: Install rust
          condition: ne( variables['Agent.OS'], 'Windows_NT' )
        - script: |
            curl -sSf -o rustup-init.exe https://win.rustup.rs
            rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
            echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
          displayName: Windows install rust
          condition: eq( variables['Agent.OS'], 'Windows_NT' )
          # Until https://github.com/rust-embedded/cross/pull/169 is merged
        - script: |
            set -eou
            D=$(mktemp -d)
            git clone https://github.com/rust-embedded/cross.git "$D"
            cd "$D"
            curl -O -L "https://gist.githubusercontent.com/nickbabcock/c7bdc8e5974ed9956abf46ffd7dc13ff/raw/e211bc17ea88e505003ad763fac7060b4ac1d8d0/patch"
            git apply patch
            cargo install --path .
            rm -rf "$D"
          displayName: Install cross
          condition: eq( variables['Agent.OS'], 'Linux' )
        - script: rustup component add clippy rustfmt
          displayName: install clipppy and rustfmt
        - script: cargo fmt --all -- --check
          displayName: rustfmt
          workingDirectory: $(working_directory)
        # - script: cargo clippy --all-targets -- -D warnings
        #   displayName: clippy
        #   workingDirectory: $(working_directory)
        - script: $(test_command) --all --release
          displayName: Cargo test
          workingDirectory: $(working_directory)
        - script: $(build_command) --all --release
          displayName: Cargo build
          workingDirectory: $(working_directory)
        - publish: $(working_directory)/$(binary_file)
          artifact: $(artifact_name)
          displayName: Publish binaries

    - job: lint_frontend
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '8.x'
      - script: yarn install
        displayName: Install frontend dependencies
        workingDirectory: webapp
      - script: yarn lint:js
        displayName: Lint frontend
        workingDirectory: webapp
      - script: ./node_modules/.bin/ember build --environment production
        displayName: Ember build
        workingDirectory: webapp
      - publish: webapp/dist
        artifact: frontend
        displayName: Publish frontend

    - job: lint_backend
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.6'
            addToPath: true

        - script: python -m pip install virtualenv
          displayName: Install virtualenv
        - script: python3 manage.py bootstrap --app --develop
          displayName: Bootstrap Python environment

- stage: dockerize
  jobs:
    - job: dockerize
      pool:
        vmImage: 'ubuntu-16.04'
      steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: combadge_mac
            path: $(Build.SourcesDirectory)/combadge_mac
            displayName: Download macOS Combadge
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: combadge_linux
            path: $(Build.SourcesDirectory)/combadge_linux
            displayName: Download Linux Combadge
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: combadge_windows
            path: $(Build.SourcesDirectory)/combadge_windows
            displayName: Download Windows Combadge
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: frontend
            path: $(Build.SourcesDirectory)/frontend
            displayName: Download web frontend
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: transporter
            path: $(Build.SourcesDirectory)/transporter
            displayName: Download Transporter
        - script: ls -Ra
        - task: Docker@2
          displayName: Login to Docker Hub
          inputs:
            command: login
            containerRegistry: DockerHub
        - task: Docker@2
          displayName: Build and Push
          inputs:
            command: buildAndPush
            buildContext: .
            repository: getslash/scotty
